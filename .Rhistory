d
mulAssign[,d,a] <- myfun(1, 2)
a
a = new("result")
log_MMHC_bp <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/bipartite/test_100_50/MMHC/mean_log.txt", header = FALSE))
log_MMHC_pt <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/polytree/test_100_50/MMHC/mean_log.txt", header = FALSE))
log_MMHC_sf <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/scale-free/test_100_50/MMHC/mean_log.txt", header = FALSE))
log_MMHC_sw <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/small-world/test_100_50/MMHC/mean_log.txt", header = FALSE))
log_HC_bp <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/bipartite/test_100_50/HC/mean_log.txt", header = FALSE))
log_HC_pt <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/polytree/test_100_50/HC/mean_log.txt", header = FALSE))
log_HC_sf <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/scale-free/test_100_50/HC/mean_log.txt", header = FALSE))
log_HC_sw <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/small-world/test_100_50/HC/mean_log.txt", header = FALSE))
log_CD_bp <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/bipartite/test_100_50/CD/mean_log.txt", header = FALSE))
log_CD_pt <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/polytree/test_100_50/CD/mean_log.txt", header = FALSE))
log_CD_sf <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/scale-free/test_100_50/CD/mean_log.txt", header = FALSE))
log_CD_sw <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/small-world/test_100_50/CD/mean_log.txt", header = FALSE))
# boxlplot
n_data = 20
lable_CD <- rep("CD", n_data)
lable_HC <- rep("HC", n_data)
lable_MMHC <- rep("MMHC", n_data)
bp_data <- rbind(cbind(log_CD_bp, lable_CD), cbind(log_HC_bp, lable_HC), cbind(log_MMHC_bp, lable_MMHC))
pt_data <- rbind(cbind(log_CD_pt, lable_CD), cbind(log_HC_pt, lable_HC), cbind(log_MMHC_pt, lable_MMHC))
sf_data <- rbind(cbind(log_CD_sf, lable_CD), cbind(log_HC_sf, lable_HC), cbind(log_MMHC_sf, lable_MMHC))
sw_data <- rbind(cbind(log_CD_sw, lable_CD), cbind(log_HC_sw, lable_HC), cbind(log_MMHC_sw, lable_MMHC))
colnames(bp_data) = c("ll", "method")
colnames(pt_data) = c("ll", "method")
colnames(sf_data) = c("ll", "method")
colnames(sw_data) = c("ll", "method")
bp_data <- as.data.frame(bp_data)
pt_data <- as.data.frame(pt_data)
sf_data <- as.data.frame(sf_data)
sw_data <- as.data.frame(sw_data)
bp_data$ll <- as.numeric(as.character(bp_data$ll))
pt_data$ll <- as.numeric(as.character(pt_data$ll))
sf_data$ll <- as.numeric(as.character(sf_data$ll))
sw_data$ll <- as.numeric(as.character(sw_data$ll))
boxplot(ll ~ method, data = bp_data, ylab = "log-likelihood", at = 1:3, xlim = c(1, 15),ylim = c(-4500, -1500), col = "blue")
boxplot(ll ~ method, data = pt_data, add = TRUE, at = 5:7, col = "lightgray")
boxplot(ll ~ method, data = sf_data, add = TRUE, at = 9:11, col = "orange")
boxplot(ll ~ method, data = sw_data, add = TRUE, at = 13:15, col = "yellow")
array(1:3, c(2, 3, 4))
getwd()
?glm
library(nnet)
?nnet
?mlogit
V1<- c(1, 2, 3, 4)
V2 <- c(2, 3, 4)
V1*V2
list(, length = 5)
l <- vector(list, length = 5)
l <- array(list, length = 5)
l <- list(5)
l
l <- list(length(5))
l
l <- vector("list", length = 5)
l
class(l)
l[[1]] <- c(1, 2, 3)
l[[2]] <- c(2, 3)
l[[3]] <- c(7, 8)
l[[4]] <- c(8)
l[[5]] <- c(9)
l
l[[2]] <- NULL
l
matrix(1:9, ncol=3, byrow = TRUE)
strsplit("aespret", "e")
a <- c(1, 2, 2, 1, 2, 2, 3, 4, 5)
unique(a)
x <- "The quick brown fox jumps over the lazy dog"
split.string <- strsplit(x, " ")
extract.words <- split.string[[1]]
extract.words
split.string
result <- unique(tolower(extract.words))
print(result)
result <- unique(toupper(extract.words))
print(result)
x<- list(5:8)
x
x[1]
v <- c(1, 2, 3,4 )
v*x[1]
v
x[1]
v*x[[1]]
?pbinom
?apply
a<- c(1, 2, 3, 4)
b <- rep(2, 4)
a%%b
a%/%b
m <- meatrix(runif(9), ncol=3)
m <- matrix(runif(9), ncol=3)
max.col(m)
m
a <- rep(1, 5)
all(a==1)
all(a21)
all(a==2)
a <- 1:5
all(a==1)
a <- c(1, 1, 1, 1, 2, 2, 2, 2, 2)
b <- c(10, 12, 15, 12, NA, 30, 42, 38, 40)
split(a, b)
split(b, a)
s <- split(b, a)
lapply(s, mean)
lapply(s, mean, na.rm = TRUE)
View(pt_data)
seq_along(6)
seq(6)
?seq
seq_along(1:5)
seq_along(10:5)
seq_along(10:6)
?apply
myFun <- function(x, y, z) {
x+y/z
}
wrap <- function(a, myFun) {
myFun(a, a^2, a^3)
}
wrap(2, myFun)
wrap <- function(a, func) {
a+func
}
wrap(2, func = myFun, x=1, y=2, z=3)
wrap <- function(a, func, ...) {
a+func(...)
}
wrap(2, func = myFun, x=1, y=2, z=3)
?Reduce
install.packages("roxygen2")
?sapply
a <- c(1, 3, 2, 4)
sort(a)
order(a)
a[order(a)]
log_MMHC_bp <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/bipartite/test_100_100/MMHC/mean_log.txt", header = FALSE))
log_MMHC_pt <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/polytree/test_100_100/MMHC/mean_log.txt", header = FALSE))
log_MMHC_sf <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/scale-free/test_100_100/MMHC/mean_log.txt", header = FALSE))
log_MMHC_sw <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/small-world/test_100_100/MMHC/mean_log.txt", header = FALSE))
log_HC_bp <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/bipartite/test_100_100/HC/mean_log.txt", header = FALSE))
log_HC_pt <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/polytree/test_100_100/HC/mean_log.txt", header = FALSE))
log_HC_sf <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/scale-free/test_100_100/HC/mean_log.txt", header = FALSE))
log_HC_sw <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/small-world/test_100_100/HC/mean_log.txt", header = FALSE))
log_CD_bp <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/bipartite/test_100_100/CD/mean_log.txt", header = FALSE))
log_CD_pt <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/polytree/test_100_100/CD/mean_log.txt", header = FALSE))
log_CD_sf <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/scale-free/test_100_100/CD/mean_log.txt", header = FALSE))
log_CD_sw <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/small-world/test_100_100/CD/mean_log.txt", header = FALSE))
# boxlplot
n_data = 20
lable_CD <- rep("CD", n_data)
lable_HC <- rep("HC", n_data)
lable_MMHC <- rep("MMHC", n_data)
bp_data <- rbind(cbind(log_CD_bp, lable_CD), cbind(log_HC_bp, lable_HC), cbind(log_MMHC_bp, lable_MMHC))
pt_data <- rbind(cbind(log_CD_pt, lable_CD), cbind(log_HC_pt, lable_HC), cbind(log_MMHC_pt, lable_MMHC))
sf_data <- rbind(cbind(log_CD_sf, lable_CD), cbind(log_HC_sf, lable_HC), cbind(log_MMHC_sf, lable_MMHC))
sw_data <- rbind(cbind(log_CD_sw, lable_CD), cbind(log_HC_sw, lable_HC), cbind(log_MMHC_sw, lable_MMHC))
colnames(bp_data) = c("ll", "method")
colnames(pt_data) = c("ll", "method")
colnames(sf_data) = c("ll", "method")
colnames(sw_data) = c("ll", "method")
bp_data <- as.data.frame(bp_data)
pt_data <- as.data.frame(pt_data)
sf_data <- as.data.frame(sf_data)
sw_data <- as.data.frame(sw_data)
bp_data$ll <- as.numeric(as.character(bp_data$ll))
pt_data$ll <- as.numeric(as.character(pt_data$ll))
sf_data$ll <- as.numeric(as.character(sf_data$ll))
sw_data$ll <- as.numeric(as.character(sw_data$ll))
boxplot(ll ~ method, data = bp_data, ylab = "log-likelihood", at = 1:3, xlim = c(1, 15),ylim = c(-4500, -1500), col = "blue")
boxplot(ll ~ method, data = pt_data, add = TRUE, at = 5:7, col = "lightgray")
boxplot(ll ~ method, data = sf_data, add = TRUE, at = 9:11, col = "orange")
boxplot(ll ~ method, data = sw_data, add = TRUE, at = 13:15, col = "yellow")
boxplot(ll ~ method, data = bp_data, ylab = "log-likelihood", at = 1:3, xlim = c(1, 15),ylim = c(-5000, -2450), col = "blue")
boxplot(ll ~ method, data = pt_data, add = TRUE, at = 5:7, col = "lightgray")
boxplot(ll ~ method, data = sf_data, add = TRUE, at = 9:11, col = "orange")
boxplot(ll ~ method, data = sw_data, add = TRUE, at = 13:15, col = "yellow")
boxplot(ll ~ method, data = bp_data, ylab = "log-likelihood", at = 1:3, xlim = c(1, 15),ylim = c(-6000, -2450), col = "blue")
boxplot(ll ~ method, data = pt_data, add = TRUE, at = 5:7, col = "lightgray")
boxplot(ll ~ method, data = sf_data, add = TRUE, at = 9:11, col = "orange")
boxplot(ll ~ method, data = sw_data, add = TRUE, at = 13:15, col = "yellow")
boxplot(ll ~ method, data = bp_data, ylab = "log-likelihood", at = 1:3, xlim = c(1, 15),ylim = c(-6500, -2450), col = "blue")
boxplot(ll ~ method, data = pt_data, add = TRUE, at = 5:7, col = "lightgray")
boxplot(ll ~ method, data = sf_data, add = TRUE, at = 9:11, col = "orange")
boxplot(ll ~ method, data = sw_data, add = TRUE, at = 13:15, col = "yellow")
boxplot(ll ~ method, data = bp_data, ylab = "log-likelihood", at = 1:3, xlim = c(1, 15),ylim = c(-6100, -2450), col = "blue")
boxplot(ll ~ method, data = pt_data, add = TRUE, at = 5:7, col = "lightgray")
boxplot(ll ~ method, data = sf_data, add = TRUE, at = 9:11, col = "orange")
boxplot(ll ~ method, data = sw_data, add = TRUE, at = 13:15, col = "yellow")
log_MMHC_bp <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/bipartite/test_100_500/MMHC/mean_log.txt", header = FALSE))
log_MMHC_pt <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/polytree/test_100_500/MMHC/mean_log.txt", header = FALSE))
log_MMHC_sf <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/scale-free/test_100_500/MMHC/mean_log.txt", header = FALSE))
log_MMHC_sw <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/small-world/test_100_500/MMHC/mean_log.txt", header = FALSE))
log_HC_bp <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/bipartite/test_100_500/HC/mean_log.txt", header = FALSE))
log_HC_pt <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/polytree/test_100_500/HC/mean_log.txt", header = FALSE))
log_HC_sf <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/scale-free/test_100_500/HC/mean_log.txt", header = FALSE))
log_HC_sw <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/small-world/test_100_500/HC/mean_log.txt", header = FALSE))
log_CD_bp <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/bipartite/test_100_500/CD/mean_log.txt", header = FALSE))
log_CD_pt <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/polytree/test_100_500/CD/mean_log.txt", header = FALSE))
log_CD_sf <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/scale-free/test_100_500/CD/mean_log.txt", header = FALSE))
log_CD_sw <- as.matrix(read.table("/Users/gujiaying/Documents/STAT-COURSE/master thesis/revise/CD-Loglike/fix_lambda/observational/small-world/test_100_500/CD/mean_log.txt", header = FALSE))
# boxlplot
n_data = 20
lable_CD <- rep("CD", n_data)
lable_HC <- rep("HC", n_data)
lable_MMHC <- rep("MMHC", n_data)
bp_data <- rbind(cbind(log_CD_bp, lable_CD), cbind(log_HC_bp, lable_HC), cbind(log_MMHC_bp, lable_MMHC))
pt_data <- rbind(cbind(log_CD_pt, lable_CD), cbind(log_HC_pt, lable_HC), cbind(log_MMHC_pt, lable_MMHC))
sf_data <- rbind(cbind(log_CD_sf, lable_CD), cbind(log_HC_sf, lable_HC), cbind(log_MMHC_sf, lable_MMHC))
sw_data <- rbind(cbind(log_CD_sw, lable_CD), cbind(log_HC_sw, lable_HC), cbind(log_MMHC_sw, lable_MMHC))
colnames(bp_data) = c("ll", "method")
colnames(pt_data) = c("ll", "method")
colnames(sf_data) = c("ll", "method")
colnames(sw_data) = c("ll", "method")
bp_data <- as.data.frame(bp_data)
pt_data <- as.data.frame(pt_data)
sf_data <- as.data.frame(sf_data)
sw_data <- as.data.frame(sw_data)
bp_data$ll <- as.numeric(as.character(bp_data$ll))
pt_data$ll <- as.numeric(as.character(pt_data$ll))
sf_data$ll <- as.numeric(as.character(sf_data$ll))
sw_data$ll <- as.numeric(as.character(sw_data$ll))
boxplot(ll ~ method, data = bp_data, ylab = "log-likelihood", at = 1:3, xlim = c(1, 15),ylim = c(-6100, -2450), col = "blue")
boxplot(ll ~ method, data = pt_data, add = TRUE, at = 5:7, col = "lightgray")
boxplot(ll ~ method, data = sf_data, add = TRUE, at = 9:11, col = "orange")
boxplot(ll ~ method, data = sw_data, add = TRUE, at = 13:15, col = "yellow")
max(sf_data$ll)
max(sw_data$ll)
min(bp_data$ll)
boxplot(ll ~ method, data = bp_data, ylab = "log-likelihood", at = 1:3, xlim = c(1, 15),ylim = c(-26000, -9500), col = "blue")
boxplot(ll ~ method, data = pt_data, add = TRUE, at = 5:7, col = "lightgray")
boxplot(ll ~ method, data = sf_data, add = TRUE, at = 9:11, col = "orange")
boxplot(ll ~ method, data = sw_data, add = TRUE, at = 13:15, col = "yellow")
devtools::document()
devtools::use_rcpp()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(discretecdAlgorithm)
data <- read.table("~/Documents/STAT-COURSE/master thesis/revise/multinomial/small_network/test_6_5000/data.txt", quote="\"", comment.char="")
data <- data[1:2500, ]
dataSize <- dim(data)[1]
node <- dim(data)[2]
nlevels <- rep(3, node)
nlevels <- as.integer(nlevels)
obsIndex_R <- rep(0, dataSize)
obsIndex_R <- as.integer(obsIndex_R)
eor_nr <- node*(node-1)/2
eor <- matrix(0, nrow=eor_nr, ncol=2)
cnt1=1
for (i in 1:(node-1)) {
for (j in (i+1):node) {
eor[cnt1, 1] = i;
eor[cnt1, 2] = j;
cnt1 = cnt1+1;
}
}
eor <- matrix(as.integer(eor), ncol = 2)
weights <- matrix(1, node, node)
estimation <- CD.run(data, nlevels, obsIndex_R, eor_nr, eor, weights)
out_dag <- estimation
?pca
?nrow
library(sparsebnUtils)
?sparsebnFit
?apply
dataSize <- 200
graph <- matrix(0, 10, 10)
graph[1, 3] = 1
graph[1, 5] = 1
graph[1, 9] = 1
graph[2, 3] = 1
graph[2, 4] = 1
graph[3, 7] = 1
graph[4, 9] = 1
graph[5, 6] = 1
graph[6, 8] = 1
graph[9, 10] = 1
graph
get.summary.discretebnAlgorithm <- function(graph, dataSize) {
nedge <- sum(graph)
pp <- ncol(graph)
nn <- dataSize
edges <- apply(graph, 2, function(x){
return(which(x==1))
})
}
test.out <- get.summary.discretebnAlgorithm(graph, dataSize)
get.summary.discretebnAlgorithm <- function(graph, dataSize, lambda, time) {
lambda = lambda
nedge <- sum(graph)
pp <- ncol(graph)
nn <- dataSize
edges <- apply(graph, 2, function(x){
return(which(x==1))
})
return(list(edges = edges, lambda = lambda, nedge = nedge, pp = pp, nn = nn, time = time))
}
test.out <- get.summary.discretebnAlgorithm(graph, dataSize, lambda = 10, time=1)
test.out$edges
?seq
nlam=30
lambda <- seq(from = 1, to=0, by = (1/(nlam-1)))
(1/(nlam-1))
lambda <- seq(from = 1, to=0, by = -(1/(nlam-1)))
lambda
time = rep(1, nlam)
library(discretecdAlgorithm)
data <- read.table("~/Documents/STAT-COURSE/master thesis/revise/multinomial/small_network/test_6_5000/data.txt", quote="\"", comment.char="")
data <- data[1:2500, ]
dataSize <- dim(data)[1]
node <- dim(data)[2]
nlevels <- rep(3, node)
nlevels <- as.integer(nlevels)
eor_nr <- node*(node-1)/2
eor <- matrix(0, nrow=eor_nr, ncol=2)
cnt1=1
for (i in 1:(node-1)) {
for (j in (i+1):node) {
eor[cnt1, 1] = i;
eor[cnt1, 2] = j;
cnt1 = cnt1+1;
}
}
eor <- matrix(as.integer(eor), ncol = 2)
weights <- matrix(1, node, node)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
?sparsebnData
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
library(discretecdAlgorithm)
obsIndex_R <- rep(0, dataSize)
obsIndex_R <- as.integer(obsIndex_R)
estimation <- CD.run(data, nlevels, obsIndex_R, eor_nr, eor, weights)
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, obsIndex_R, eor_nr, eor, weights)
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, obsIndex_R, eor_nr, eor, weights)
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, obsIndex_R, eor_nr, eor, weights)
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, obsIndex_R, eor_nr, eor, weights)
indata <- data
data <- sparsebnUtils::sparsebnData.data.frame(data = indata, type = "discrete")
if(is.data.frame(indata)){
warning(sparsebnUtils::alg_input_data_frame())
data <- sparsebnUtils::sparsebnData.data.frame(data = indata, type = "discrete")
# obsIndex_R <- rep(0, dataSize)
# obsIndex_R <- as.integer(obsIndex_R)
}
if(!sparsebnUtils::is.sparsebnData(data)) stop(sparsebnUtils::input_not_sparsebnData(data))
data_matrix <- data$data
obsIndex_R <- data$ivn
obsIndex_R <- as.integer(obsIndex_R)
obsIndex_R <- as.array(obsIndex_R)
?sapply
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
obsIndex_R <- sapply(obsIndex_R, function(x){
if (length(x) == 0) {
return(0L)
}
else {
return(as.integer(x))
}
})
obsIndex_R <- rep(0, dataSize)
obsIndex_R <- as.integer(obsIndex_R)
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
node
dataSize
obsIndex_R
data
data_matrix
nrow(indata)
dataSize
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
data <- read.table("~/Documents/STAT-COURSE/master thesis/revise/multinomial/small_network/test_6_5000/data.txt", quote="\"", comment.char="")
data <- data[1:2500, ]
dataSize <- dim(data)[1]
node <- dim(data)[2]
nlevels <- rep(3, node)
nlevels <- as.integer(nlevels)
# obsIndex_R <- rep(0, dataSize)
# obsIndex_R <- as.integer(obsIndex_R)
eor_nr <- node*(node-1)/2
eor <- matrix(0, nrow=eor_nr, ncol=2)
cnt1=1
for (i in 1:(node-1)) {
for (j in (i+1):node) {
eor[cnt1, 1] = i;
eor[cnt1, 2] = j;
cnt1 = cnt1+1;
}
}
eor <- matrix(as.integer(eor), ncol = 2)
weights <- matrix(1, node, node)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
list(0, length=10)
sparsebnUtils:::sparsebnData
sparsebnUtils:::sparsebnData.data.frame
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
edges
x
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
nn
edges
edges
dim(graph)
graph
graph <- matrix(0, 5, 5)
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
node = 5
ivn = vector("list", 6)
get_obsIndex <- function(ivn, node) {
obsIndex <- vector("list", length = node)
ind <- 1:node
obsIndex <- lapply(ind, function(x, ivn) {
if_in <- sapply(ivn, function(y) {x %in% y})
observation <- 1:length(ivn)
obsIndex_one <-observation[!if_in]
if (length(obsIndex_one)==0) {obsIndex_one == 0L}
obsIndex_one
}, ivn)
return(obsIndex)
}
data_ivn = ivn
obsIndex_R <- get_obsIndex(data_ivn, node)
ind <- 1:node
is_obs_zero <- sapply(obsIndex_R, function(x){length(x)==0})
if(length(ind[is_obs_zero])!=0) {
stop(sprintf("%d th node has been intervened in all observations, remove this node \n", ind[is_obs_zero]))
}
obsIndex_R
obsIndex_R <- lapply(obsIndex_R, function(x) {x-1})
obsIndex_R
library(discretecdAlgorithm)
data <- read.table("~/Documents/STAT-COURSE/master thesis/revise/simulation/observational/bipartite/test_100_500/data.txt", quote="\"", comment.char="")
data <- data[1:250, ]
dataSize <- dim(data)[1]
node <- dim(data)[2]
nlevels <- rep(3, node)
nlevels <- as.integer(nlevels)
eor_nr <- node*(node-1)/2
eor <- matrix(0, nrow=eor_nr, ncol=2)
cnt1=1
for (i in 1:(node-1)) {
for (j in (i+1):node) {
eor[cnt1, 1] = i;
eor[cnt1, 2] = j;
cnt1 = cnt1+1;
}
}
eor <- matrix(as.integer(eor), ncol = 2)
weights <- matrix(1, node, node)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
estimation[[30]]$nedge
estimation[[10]]$nedge
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
estimation[[10]]$nedge
trueG <- read.table("~/Documents/STAT-COURSE/master thesis/revise/simulation/observational/bipartite/test_100_500/trueG.txt", quote="\"", comment.char="")
estimateG <- as.matrix(get.adjacency.matrix(estimation[[10]]))
library(sparsebnUtils)
estimateG <- as.matrix(get.adjacency.matrix(estimation[[10]]))
E = sum(trueG*estimateG)
R = sum(trueG*t(estimateG))
E; R
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
# out_dag <- estimation[[30]]
## estimation is a matrix where nrow = nlam*node, ncol=node. So it outputs all the graphs along the solution path.
trueG <- read.table("~/Documents/STAT-COURSE/master thesis/revise/simulation/observational/bipartite/test_100_500/trueG.txt", quote="\"", comment.char="")
estimateG <- as.matrix(get.adjacency.matrix(estimation[[10]]))
E = sum(trueG*estimateG)
R = sum(trueG*t(estimateG))
E; R
CD.run
?CD.run
library(ccdrAlgorithm)
?ccdr.run
?get.adjacency.matrix
