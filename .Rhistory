boxplot(ll ~ method, data = sf_data, add = TRUE, at = 9:11, col = "orange")
boxplot(ll ~ method, data = sw_data, add = TRUE, at = 13:15, col = "yellow")
devtools::document()
devtools::use_rcpp()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(discretecdAlgorithm)
data <- read.table("~/Documents/STAT-COURSE/master thesis/revise/multinomial/small_network/test_6_5000/data.txt", quote="\"", comment.char="")
data <- data[1:2500, ]
dataSize <- dim(data)[1]
node <- dim(data)[2]
nlevels <- rep(3, node)
nlevels <- as.integer(nlevels)
obsIndex_R <- rep(0, dataSize)
obsIndex_R <- as.integer(obsIndex_R)
eor_nr <- node*(node-1)/2
eor <- matrix(0, nrow=eor_nr, ncol=2)
cnt1=1
for (i in 1:(node-1)) {
for (j in (i+1):node) {
eor[cnt1, 1] = i;
eor[cnt1, 2] = j;
cnt1 = cnt1+1;
}
}
eor <- matrix(as.integer(eor), ncol = 2)
weights <- matrix(1, node, node)
estimation <- CD.run(data, nlevels, obsIndex_R, eor_nr, eor, weights)
out_dag <- estimation
?pca
?nrow
library(sparsebnUtils)
?sparsebnFit
?apply
dataSize <- 200
graph <- matrix(0, 10, 10)
graph[1, 3] = 1
graph[1, 5] = 1
graph[1, 9] = 1
graph[2, 3] = 1
graph[2, 4] = 1
graph[3, 7] = 1
graph[4, 9] = 1
graph[5, 6] = 1
graph[6, 8] = 1
graph[9, 10] = 1
graph
get.summary.discretebnAlgorithm <- function(graph, dataSize) {
nedge <- sum(graph)
pp <- ncol(graph)
nn <- dataSize
edges <- apply(graph, 2, function(x){
return(which(x==1))
})
}
test.out <- get.summary.discretebnAlgorithm(graph, dataSize)
get.summary.discretebnAlgorithm <- function(graph, dataSize, lambda, time) {
lambda = lambda
nedge <- sum(graph)
pp <- ncol(graph)
nn <- dataSize
edges <- apply(graph, 2, function(x){
return(which(x==1))
})
return(list(edges = edges, lambda = lambda, nedge = nedge, pp = pp, nn = nn, time = time))
}
test.out <- get.summary.discretebnAlgorithm(graph, dataSize, lambda = 10, time=1)
test.out$edges
?seq
nlam=30
lambda <- seq(from = 1, to=0, by = (1/(nlam-1)))
(1/(nlam-1))
lambda <- seq(from = 1, to=0, by = -(1/(nlam-1)))
lambda
time = rep(1, nlam)
library(discretecdAlgorithm)
data <- read.table("~/Documents/STAT-COURSE/master thesis/revise/multinomial/small_network/test_6_5000/data.txt", quote="\"", comment.char="")
data <- data[1:2500, ]
dataSize <- dim(data)[1]
node <- dim(data)[2]
nlevels <- rep(3, node)
nlevels <- as.integer(nlevels)
eor_nr <- node*(node-1)/2
eor <- matrix(0, nrow=eor_nr, ncol=2)
cnt1=1
for (i in 1:(node-1)) {
for (j in (i+1):node) {
eor[cnt1, 1] = i;
eor[cnt1, 2] = j;
cnt1 = cnt1+1;
}
}
eor <- matrix(as.integer(eor), ncol = 2)
weights <- matrix(1, node, node)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
?sparsebnData
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
library(discretecdAlgorithm)
obsIndex_R <- rep(0, dataSize)
obsIndex_R <- as.integer(obsIndex_R)
estimation <- CD.run(data, nlevels, obsIndex_R, eor_nr, eor, weights)
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, obsIndex_R, eor_nr, eor, weights)
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, obsIndex_R, eor_nr, eor, weights)
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, obsIndex_R, eor_nr, eor, weights)
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, obsIndex_R, eor_nr, eor, weights)
indata <- data
data <- sparsebnUtils::sparsebnData.data.frame(data = indata, type = "discrete")
if(is.data.frame(indata)){
warning(sparsebnUtils::alg_input_data_frame())
data <- sparsebnUtils::sparsebnData.data.frame(data = indata, type = "discrete")
# obsIndex_R <- rep(0, dataSize)
# obsIndex_R <- as.integer(obsIndex_R)
}
if(!sparsebnUtils::is.sparsebnData(data)) stop(sparsebnUtils::input_not_sparsebnData(data))
data_matrix <- data$data
obsIndex_R <- data$ivn
obsIndex_R <- as.integer(obsIndex_R)
obsIndex_R <- as.array(obsIndex_R)
?sapply
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
obsIndex_R <- sapply(obsIndex_R, function(x){
if (length(x) == 0) {
return(0L)
}
else {
return(as.integer(x))
}
})
obsIndex_R <- rep(0, dataSize)
obsIndex_R <- as.integer(obsIndex_R)
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
node
dataSize
obsIndex_R
data
data_matrix
nrow(indata)
dataSize
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
data <- read.table("~/Documents/STAT-COURSE/master thesis/revise/multinomial/small_network/test_6_5000/data.txt", quote="\"", comment.char="")
data <- data[1:2500, ]
dataSize <- dim(data)[1]
node <- dim(data)[2]
nlevels <- rep(3, node)
nlevels <- as.integer(nlevels)
# obsIndex_R <- rep(0, dataSize)
# obsIndex_R <- as.integer(obsIndex_R)
eor_nr <- node*(node-1)/2
eor <- matrix(0, nrow=eor_nr, ncol=2)
cnt1=1
for (i in 1:(node-1)) {
for (j in (i+1):node) {
eor[cnt1, 1] = i;
eor[cnt1, 2] = j;
cnt1 = cnt1+1;
}
}
eor <- matrix(as.integer(eor), ncol = 2)
weights <- matrix(1, node, node)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
list(0, length=10)
sparsebnUtils:::sparsebnData
sparsebnUtils:::sparsebnData.data.frame
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
edges
x
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
nn
edges
edges
dim(graph)
graph
graph <- matrix(0, 5, 5)
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
node = 5
ivn = vector("list", 6)
get_obsIndex <- function(ivn, node) {
obsIndex <- vector("list", length = node)
ind <- 1:node
obsIndex <- lapply(ind, function(x, ivn) {
if_in <- sapply(ivn, function(y) {x %in% y})
observation <- 1:length(ivn)
obsIndex_one <-observation[!if_in]
if (length(obsIndex_one)==0) {obsIndex_one == 0L}
obsIndex_one
}, ivn)
return(obsIndex)
}
data_ivn = ivn
obsIndex_R <- get_obsIndex(data_ivn, node)
ind <- 1:node
is_obs_zero <- sapply(obsIndex_R, function(x){length(x)==0})
if(length(ind[is_obs_zero])!=0) {
stop(sprintf("%d th node has been intervened in all observations, remove this node \n", ind[is_obs_zero]))
}
obsIndex_R
obsIndex_R <- lapply(obsIndex_R, function(x) {x-1})
obsIndex_R
library(discretecdAlgorithm)
data <- read.table("~/Documents/STAT-COURSE/master thesis/revise/simulation/observational/bipartite/test_100_500/data.txt", quote="\"", comment.char="")
data <- data[1:250, ]
dataSize <- dim(data)[1]
node <- dim(data)[2]
nlevels <- rep(3, node)
nlevels <- as.integer(nlevels)
eor_nr <- node*(node-1)/2
eor <- matrix(0, nrow=eor_nr, ncol=2)
cnt1=1
for (i in 1:(node-1)) {
for (j in (i+1):node) {
eor[cnt1, 1] = i;
eor[cnt1, 2] = j;
cnt1 = cnt1+1;
}
}
eor <- matrix(as.integer(eor), ncol = 2)
weights <- matrix(1, node, node)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
estimation[[30]]$nedge
estimation[[10]]$nedge
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
estimation[[10]]$nedge
trueG <- read.table("~/Documents/STAT-COURSE/master thesis/revise/simulation/observational/bipartite/test_100_500/trueG.txt", quote="\"", comment.char="")
estimateG <- as.matrix(get.adjacency.matrix(estimation[[10]]))
library(sparsebnUtils)
estimateG <- as.matrix(get.adjacency.matrix(estimation[[10]]))
E = sum(trueG*estimateG)
R = sum(trueG*t(estimateG))
E; R
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
# out_dag <- estimation[[30]]
## estimation is a matrix where nrow = nlam*node, ncol=node. So it outputs all the graphs along the solution path.
trueG <- read.table("~/Documents/STAT-COURSE/master thesis/revise/simulation/observational/bipartite/test_100_500/trueG.txt", quote="\"", comment.char="")
estimateG <- as.matrix(get.adjacency.matrix(estimation[[10]]))
E = sum(trueG*estimateG)
R = sum(trueG*t(estimateG))
E; R
CD.run
?CD.run
library(ccdrAlgorithm)
?ccdr.run
?get.adjacency.matrix
?get.adjacency.matrix
library(discretecdAlgorithm)
?get.adjacency.matrix
library(ccdrAlgorithm)
?get.adjacency.matrix
library(discretecdAlgorithm)
data <- read.table("~/Documents/STAT-COURSE/master thesis/revise/simulation/observational/bipartite/test_100_500/data.txt", quote="\"", comment.char="")
# data <- read.table("~/Documents/STAT-COURSE/master thesis/revise/multinomial/small_network/test_6_5000/data.txt", quote="\"", comment.char="")
data <- data[1:250, ]
dataSize <- dim(data)[1]
node <- dim(data)[2]
nlevels <- rep(3, node)
nlevels <- as.integer(nlevels)
# obsIndex_R <- rep(0, dataSize)
# obsIndex_R <- as.integer(obsIndex_R)
eor_nr <- node*(node-1)/2
eor <- matrix(0, nrow=eor_nr, ncol=2)
cnt1=1
for (i in 1:(node-1)) {
for (j in (i+1):node) {
eor[cnt1, 1] = i;
eor[cnt1, 2] = j;
cnt1 = cnt1+1;
}
}
eor <- matrix(as.integer(eor), ncol = 2)
weights <- matrix(1, node, node)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
estimation[[30]]$nedge
estimation[[10]]$nedge
trueG <- read.table("~/Documents/STAT-COURSE/master thesis/revise/simulation/observational/bipartite/test_100_500/trueG.txt", quote="\"", comment.char="")
estimateG <- as.matrix(get.adjacency.matrix(estimation[[10]]))
E = sum(trueG*estimateG)
R = sum(trueG*t(estimateG))
E; R
library(sparsebnUtils)
estimateG <- as.matrix(get.adjacency.matrix(estimation[[10]]))
E = sum(trueG*estimateG)
R = sum(trueG*t(estimateG))
E; R
estimation[[1]]$lambda
estimation[[30]]$lambda
library(discretecdAlgorithm)
estimateG <- as.matrix(get.adjacency.matrix(estimation[[10]]))
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
estimation[[10]]$time
data <- data[1:50, ]
dataSize <- dim(data)[1]
node <- dim(data)[2]
nlevels <- rep(3, node)
nlevels <- as.integer(nlevels)
eor_nr <- node*(node-1)/2
eor <- matrix(0, nrow=eor_nr, ncol=2)
cnt1=1
for (i in 1:(node-1)) {
for (j in (i+1):node) {
eor[cnt1, 1] = i;
eor[cnt1, 2] = j;
cnt1 = cnt1+1;
}
}
eor <- matrix(as.integer(eor), ncol = 2)
weights <- matrix(1, node, node)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
estimateG <- as.matrix(get.adjacency.matrix(estimation[[10]]))
E = sum(trueG*estimateG)
R = sum(trueG*t(estimateG))
E; R
P = sum(estimateG)
E = sum(trueG*estimateG)
R = sum(trueG*t(estimateG))
FP = P - E - R
P; E; R; FP
out.10 <- estimation[[10]]
out.10
out.10$lambda
out.10$nedge
out.10$pp
out.10$nn
out.10$time
0.9757*sqrt(3)/sqrt(1-0.9757^2)
1.93*8+2.5
/60
17.94/60
1.93*8
0.0022*1.69+0.0023
0.0023-0.0022*1.69
sqrt(0.0024/24)
sqrt(0.0024/34)
0.0228/(0.0228+0.0024)
1.1163/0.0624
0.0023/0.0022
0.1163/0.0624
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
estimation
length(estimation)
estimation[[30]]$nedge
list(1, 2, 3, 4,5 )
l <- list(1, 2, 3, 4,5 )
if_remove <- c(TRUE, FALSE, FALSE, FALSE, FALSE)
l[[if_remove]]==NULL
l[if_remove]==NULL
l[if_remove]=NULL
l
l[[if_remove]]=NULL
l = list(1, 2, 3, 4, 5)
l[[if_remove]]=NULL
l[if_remove]=NULL
l
l = list(1, 2, 3, 4, 5)
if_remove = c(FALSE, TRUE, FALSE, TRUE, TRUE)
l[if_remove] = NULL
l
library(discretecdAlgorithm)
estimation <- CD.run(data, nlevels, eor_nr, eor, weights)
estimation
l
l <- list(1:5)
l
l <- list(1, 2, 3, 4, 5)
l
l[if_remove]
l <- list("1" = 1, "2" =2, "3" = 3)
l
l <- list(1 = 1, 2 =2, 3 = 3)
l <- list(edge = 1, node =2, dim() = 3)
l <- list(edge = 1, node =2, dim = 3)
l
l$edge
l[edge]
l[1]
l[[1]]
l[[1]]=NULL
l
l <- list(edge = 1, node =2, dim = 3)
l[1]=NULL
l
290*54/5/460
29/46
1-(59/54*(1-29/46))
1-(59/50*(1-0.65))
236.3/2
116.11/19
118.15/116.11*19
236.3/352.41
1-(21/19*(1-236.3/352.41))
75/15
0.6/0.31
log20 <- read.table("~/Documents/STAT-COURSE/master thesis/revise/CD-globle/test/interventional/bipartite/test_50_250/test_cut20/scores.txt", quote="\"", comment.char="")
logpath <- read.table("~/Documents/STAT-COURSE/master thesis/revise/CD-globle/test/interventional/bipartite/test_50_250/test_path/scores.txt", quote="\"", comment.char="")
lable_path <- rep("CD-path", n_data)
lable_20 <- rep("rdm-init", n_data)
path_data <- rbind(cbind(logpath, lable_path), cbind(log20, lable_20))
colnames(path_data) = c("pll", "method")
path_data <- as.data.frame(path_data)
path_data$pll <- as.numeric(as.character(path_data$pll))
boxplot(pll~method, data = path_data, col = "lightgray", ylab = "penalized log-likelihood")
log20 <- read.table("~/Documents/STAT-COURSE/master thesis/revise/CD-globle/test/interventional/bipartite/test_50_250/test_cut20/scores.txt", quote="\"", comment.char="")
logpath <- read.table("~/Documents/STAT-COURSE/master thesis/revise/CD-globle/test/interventional/bipartite/test_50_250/test_path/scores.txt", quote="\"", comment.char="")
n_data <- 20
n_lam <- 30
lable_path <- rep("CD-path", n_data)
lable_20 <- rep("rdm-init", n_data)
path_data <- rbind(cbind(logpath, lable_path), cbind(log20, lable_20))
colnames(path_data) = c("pll", "method")
path_data <- as.data.frame(path_data)
path_data$pll <- as.numeric(as.character(path_data$pll))
log20 <- as.matrix(log20)
logpath <- as.matrix(logpath)
lable_path <- rep("CD-path", n_data)
lable_20 <- rep("rdm-init", n_data)
path_data <- rbind(cbind(logpath, lable_path), cbind(log20, lable_20))
colnames(path_data) = c("pll", "method")
path_data <- as.data.frame(path_data)
path_data$pll <- as.numeric(as.character(path_data$pll))
boxplot(pll~method, data = path_data, col = "lightgray", ylab = "penalized log-likelihood")
n_data <- 20
n_lam <- 30
log20 <- read.table("~/Documents/STAT-COURSE/master thesis/revise/CD-globle/test/interventional/bipartite/test_100_500/test_cut20/scores.txt", quote="\"", comment.char="")
logpath <- read.table("~/Documents/STAT-COURSE/master thesis/revise/CD-globle/test/interventional/bipartite/test_100_500/test_path/scores.txt", quote="\"", comment.char="")
log20 <- as.matrix(log20)
logpath <- as.matrix(logpath)
lable_path <- rep("CD-path", n_data)
lable_20 <- rep("rdm-init", n_data)
path_data <- rbind(cbind(logpath, lable_path), cbind(log20, lable_20))
colnames(path_data) = c("pll", "method")
path_data <- as.data.frame(path_data)
path_data$pll <- as.numeric(as.character(path_data$pll))
boxplot(pll~method, data = path_data, col = "lightgray", ylab = "penalized log-likelihood")
boxplot(pll~method, data = path_data, col = "lightgray", main = "Bipartie graph, p=100", ylab = "penalized log-likelihood")
boxplot(pll~method, data = path_data, col = "lightgray", main = "Bipartie graph (p=100)", ylab = "penalized log-likelihood")
log20 <- read.table("~/Documents/STAT-COURSE/master thesis/revise/CD-globle/test/interventional/bipartite/test_50_250/test_cut20/scores.txt", quote="\"", comment.char="")
logpath <- read.table("~/Documents/STAT-COURSE/master thesis/revise/CD-globle/test/interventional/bipartite/test_50_250/test_path/scores.txt", quote="\"", comment.char="")
log20 <- as.matrix(log20)
logpath <- as.matrix(logpath)
lable_path <- rep("CD-path", n_data)
lable_20 <- rep("rdm-init", n_data)
path_data <- rbind(cbind(logpath, lable_path), cbind(log20, lable_20))
colnames(path_data) = c("pll", "method")
path_data <- as.data.frame(path_data)
path_data$pll <- as.numeric(as.character(path_data$pll))
boxplot(pll~method, data = path_data, col = "lightgray", main = "Bipartie graph (p=50)", ylab = "penalized log-likelihood")
boxplot(pll~method, data = path_data, col = "lightgray", main = "Bipartite graph (p=50)", ylab = "penalized log-likelihood")
log20 <- read.table("~/Documents/STAT-COURSE/master thesis/revise/CD-globle/test/interventional/bipartite/test_100_500/test_cut20/scores.txt", quote="\"", comment.char="")
logpath <- read.table("~/Documents/STAT-COURSE/master thesis/revise/CD-globle/test/interventional/bipartite/test_100_500/test_path/scores.txt", quote="\"", comment.char="")
log20 <- as.matrix(log20)
logpath <- as.matrix(logpath)
lable_path <- rep("CD-path", n_data)
lable_20 <- rep("rdm-init", n_data)
path_data <- rbind(cbind(logpath, lable_path), cbind(log20, lable_20))
colnames(path_data) = c("pll", "method")
path_data <- as.data.frame(path_data)
path_data$pll <- as.numeric(as.character(path_data$pll))
boxplot(pll~method, data = path_data, col = "lightgray", main = "Bipartite graph (p=100)", ylab = "penalized log-likelihood")
log20 <- read.table("~/Documents/STAT-COURSE/master thesis/revise/CD-globle/test/interventional/small-world/test_100_500/test_cut20/scores.txt", quote="\"", comment.char="")
logpath <- read.table("~/Documents/STAT-COURSE/master thesis/revise/CD-globle/test/interventional/small-world/test_100_500/test_path/scores.txt", quote="\"", comment.char="")
log20 <- as.matrix(log20)
logpath <- as.matrix(logpath)
lable_path <- rep("CD-path", n_data)
lable_20 <- rep("rdm-init", n_data)
path_data <- rbind(cbind(logpath, lable_path), cbind(log20, lable_20))
colnames(path_data) = c("pll", "method")
path_data <- as.data.frame(path_data)
path_data$pll <- as.numeric(as.character(path_data$pll))
boxplot(pll~method, data = path_data, col = "lightgray", main = "Small-world network (p=100)", ylab = "penalized log-likelihood")
log20 <- read.table("~/Documents/STAT-COURSE/master thesis/revise/CD-globle/test/interventional/small-world/test_50_250/test_cut20/scores.txt", quote="\"", comment.char="")
logpath <- read.table("~/Documents/STAT-COURSE/master thesis/revise/CD-globle/test/interventional/small-world/test_50_250/test_path/scores.txt", quote="\"", comment.char="")
log20 <- as.matrix(log20)
logpath <- as.matrix(logpath)
lable_path <- rep("CD-path", n_data)
lable_20 <- rep("rdm-init", n_data)
path_data <- rbind(cbind(logpath, lable_path), cbind(log20, lable_20))
colnames(path_data) = c("pll", "method")
path_data <- as.data.frame(path_data)
path_data$pll <- as.numeric(as.character(path_data$pll))
boxplot(pll~method, data = path_data, col = "lightgray", main = "Small-world network (p=50)", ylab = "penalized log-likelihood")
