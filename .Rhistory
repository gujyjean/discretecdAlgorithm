0, 0, 1, 0,
0, 0, 0, 1,
0, 0, 0, 0,
0, 0, 1, 1,
0, 0, 1, 1,
0, 0, 0, 1,
0, 0, 0, 0), byrow = TRUE, ncol = 4)
true_edgeList <- vector("list", length = 4)
true_edgeList[[1]] = which(adj_matrix == 2)
true_edgeList[[2]] = which(adj_matrix == 2)
true_edgeList[[3]] = c(1, 2)
true_edgeList[[4]] = c(1, 2, 3)
true_edgeList <- sparsebnUtils::edgeList(true_edgeList)
true_edgeList
library(discretecdAlgorithm)
get_obsIndex <- function(ivn, node) {
obsIndex <- vector("list", length = node)
ind <- 1:node
obsIndex <- lapply(ind, function(x, ivn) {
if_in <- sapply(ivn, function(y) {x %in% y})
observation <- 1:length(ivn)
obsIndex_one <-observation[!if_in]
if (length(obsIndex_one)==0) {obsIndex_one == 0L}
obsIndex_one
}, ivn)
return(obsIndex)
}
ivn <- list(c(1, 2), 3, 2, 1, 4, c(1, 2, 3, 4, 5))
ivn
node <- 5
get_obsIndex(ivn, node)
ivn <- list(c(1, 2), c(1, 3), c(1, 2), 1, c(1, 4), c(1, 2, 3, 4, 5))
get_obsIndex(ivn, node)
node = 5
ivn_obs <- vector("list", length = dataSize)
ivn_obs <- lapply(ivn, function(x){
return(c(0L))
})
node = 5
ivn_obs <- vector("list", length = 10)
ivn_obs <- lapply(ivn, function(x){
return(c(0L))
})
ivn_obs <- vector("list", length = 10)
ivn_obs <- lapply(ivn_obs, function(x){
return(c(0L))
})
ivn <- list(c(1, 2), c(1, 3), c(1, 2), 1, c(1, 4), c(1, 2, 3, 4, 5))
get_obsIndex <- function(ivn, node) {
obsIndex <- vector("list", length = node)
ind <- 1:node
obsIndex <- lapply(ind, function(x, ivn) {
if_in <- sapply(ivn, function(y) {x %in% y})
observation <- 1:length(ivn)
obsIndex_one <-observation[!if_in]
if (length(obsIndex_one)==0) {obsIndex_one == 0L}
obsIndex_one
}, ivn)
return(obsIndex)
}
get_obsIndex(ivn, node)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
ivn_node <- list(c(1, 2, 3), c(1, 2), c(1, 3), c(1, 4), c(1, 6), 1)
get_obsIndex(ivn_obs, node)
node
ivn_obs <- list(0, 0, 0, 0, 0, 0)
ivn_node <- list(c(1, 2, 3), c(1, 2), c(1, 3), c(1, 4), c(1, 6), 1)
get_obsIndex(ivn_node, node)
library(discretecdAlgorithm)
data <- matrix(c(1, 1, 0, 0, 1, 1,
1, 1, 0, 1, 1, 1,
0, 0, 1, 0, 0, 1,
0, 0, 1, 0, 0, 1,
0, 0, 0, 1, 1, 0,
0, 0, 0, 1, 1, 1,
1, 1, 1, 1, 0, 0,
1, 0, 1, 1, 0, 1,
0, 0, 0, 0, 1, 0,
1, 1, 1, 1, 0, 1,
1, 1, 0, 1, 1, 1,
0, 0, 1, 0, 0, 1,
1, 1, 0, 1, 0, 0,
1, 0, 1, 1, 0, 1,
1, 1, 1, 1, 1, 0,
1, 0, 1, 1, 1, 1,
0, 0, 1, 0, 0, 0,
1, 1, 0, 1, 1, 1,
1, 1, 1, 0, 0, 0,
1, 1, 1, 1, 0, 0,
0, 0, 0, 0, 1, 0,
0, 0, 1, 0, 0, 0,
1, 0, 0, 0, 1, 1,
0, 0, 1, 0, 0, 0,
1, 0, 1, 1, 0, 1,
0, 0, 0, 1, 1, 0,
0, 0, 0, 0, 0, 0,
0, 0, 1, 0, 1, 0,
0, 0, 1, 0, 0, 0,
0, 0, 1, 0, 0, 0), byrow = TRUE, ncol = 6)
node = 6; node <- as.integer(node)
dataSize = 30; dataSize <- as.integer(dataSize)
n_levels <- rep(2, 6)
n_levels <- as.integer(n_levels)
obs <- c(1, 2, 3, 4, 5, 6)
obsIndex_R <- vector("list", length = 6)
obsIndex_R <- lapply(obsIndex_R, function(x, obs){as.integer(obs)}, obs)
weights = matrix(rep(1L, 6*6), ncol = 6)
data_matrix <- matrix(c(1, 1, 0, 0, 1, 1,
1, 1, 0, 1, 1, 1,
0, 0, 1, 0, 0, 1,
0, 0, 1, 0, 0, 1,
0, 0, 0, 1, 1, 0,
0, 0, 0, 1, 1, 1,
1, 1, 1, 1, 0, 0,
1, 0, 1, 1, 0, 1,
0, 0, 0, 0, 1, 0,
1, 1, 1, 1, 0, 1,
1, 1, 0, 1, 1, 1,
0, 0, 1, 0, 0, 1,
1, 1, 0, 1, 0, 0,
1, 0, 1, 1, 0, 1,
1, 1, 1, 1, 1, 0,
1, 0, 1, 1, 1, 1,
0, 0, 1, 0, 0, 0,
1, 1, 0, 1, 1, 1,
1, 1, 1, 0, 0, 0,
1, 1, 1, 1, 0, 0,
0, 0, 0, 0, 1, 0,
0, 0, 1, 0, 0, 0,
1, 0, 0, 0, 1, 1,
0, 0, 1, 0, 0, 0,
1, 0, 1, 1, 0, 1,
0, 0, 0, 1, 1, 0,
0, 0, 0, 0, 0, 0,
0, 0, 1, 0, 1, 0,
0, 0, 1, 0, 0, 0,
0, 0, 1, 0, 0, 0), byrow = TRUE, ncol = 6)
node = 6; node <- as.integer(node)
dataSize = 30; dataSize <- as.integer(dataSize)
n_levels <- rep(2, 6)
n_levels <- as.integer(n_levels)
obs <- c(1, 2, 3, 4, 5, 6)
obsIndex_R <- vector("list", length = 6)
obsIndex_R <- lapply(obsIndex_R, function(x, obs){as.integer(obs)}, obs)
eor_nr <- node*(node-1)/2
eor <- matrix(0, nrow=eor_nr, ncol=2)
cnt1=1
for (i in 1:(node-1)) {
for (j in (i+1):node) {
eor[cnt1, 1] = i;
eor[cnt1, 2] = j;
cnt1 = cnt1+1;
}
}
eor_nr <- as.integer(eor_nr)
eor <- matrix(as.integer(eor), ncol = 2)
fmlam = 0.1; fmlam <- as.numeric(fmlam)
nlam = 10; nlam = as.integer(nlam)
eps = 0.0001; eps <- as.numeric(eps)
convLb = 0.01; convLb <- as.numeric(convLb)
qtol= 0.0001; qtol = as.numeric(qtol)
weights = matrix(rep(1L, 6*6), ncol = 6)
gamma = 1; gamma <- as.numeric(gamma)
upperbound = 100; upperbound <- as.numeric(upperbound)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
data_matrix <- matrix(as.integer(data_matrix), ncol = 6)
View(data_matrix)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
data <- matrix(c(1, 1, 0, 0, 1, 1,
1, 1, 0, 1, 1, 1,
0, 0, 1, 0, 0, 1,
0, 0, 1, 0, 0, 1,
0, 0, 0, 1, 1, 0,
0, 0, 0, 1, 1, 1,
1, 1, 1, 1, 0, 0,
1, 0, 1, 1, 0, 1,
0, 0, 0, 0, 1, 0,
1, 1, 1, 1, 0, 1,
1, 1, 0, 1, 1, 1,
0, 0, 1, 0, 0, 1,
1, 1, 0, 1, 0, 0,
1, 0, 1, 1, 0, 1,
1, 1, 1, 1, 1, 0,
1, 0, 1, 1, 1, 1,
0, 0, 1, 0, 0, 0,
1, 1, 0, 1, 1, 1,
1, 1, 1, 0, 0, 0,
1, 1, 1, 1, 0, 0,
0, 0, 0, 0, 1, 0,
0, 0, 1, 0, 0, 0,
1, 0, 0, 0, 1, 1,
0, 0, 1, 0, 0, 0,
1, 0, 1, 1, 0, 1,
0, 0, 0, 1, 1, 0,
0, 0, 0, 0, 0, 0,
0, 0, 1, 0, 1, 0,
0, 0, 1, 0, 0, 0,
0, 0, 1, 0, 0, 0), byrow = TRUE, ncol = 6)
dataSize <- dim(data)[1]
node <- dim(data)[2]
nlevels <- rep(2, node)
ivn <- vector("list", length = dataSize)
ivn <- lapply(ivn, function(x){return(as.integer(0))})
databn <- sparsebnUtils::sparsebnData(data, ivn, type = "discrete")
estimation <- CD.run(databn, nlevels)
estimation
# set up input variable
data <- matrix(c(1, 1, 0, 0, 1, 1,
1, 1, 0, 1, 1, 1,
0, 0, 1, 0, 0, 1,
0, 0, 1, 0, 0, 1,
0, 0, 0, 1, 1, 0,
0, 0, 0, 1, 1, 1,
1, 1, 1, 1, 0, 0,
1, 0, 1, 1, 0, 1,
0, 0, 0, 0, 1, 0,
1, 1, 1, 1, 0, 1,
1, 1, 0, 1, 1, 1,
0, 0, 1, 0, 0, 1,
1, 1, 0, 1, 0, 0,
1, 0, 1, 1, 0, 1,
1, 1, 1, 1, 1, 0,
1, 0, 1, 1, 1, 1,
0, 0, 1, 0, 0, 0,
1, 1, 0, 1, 1, 1,
1, 1, 1, 0, 0, 0,
1, 1, 1, 1, 0, 0,
0, 0, 0, 0, 1, 0,
0, 0, 1, 0, 0, 0,
1, 0, 0, 0, 1, 1,
0, 0, 1, 0, 0, 0,
1, 0, 1, 1, 0, 1,
0, 0, 0, 1, 1, 0,
0, 0, 0, 0, 0, 0,
0, 0, 1, 0, 1, 0,
0, 0, 1, 0, 0, 0,
0, 0, 1, 0, 0, 0), byrow = TRUE, ncol = 6)
dataSize <- dim(data)[1]
node <- dim(data)[2]
nlevels <- rep(2, node)
ivn <- vector("list", length = dataSize)
ivn <- lapply(ivn, function(x){return(as.integer(0))})
databn <- sparsebnUtils::sparsebnData(data, ivn, type = "discrete")
expect_error(CD.run(databn, nlevels), NA)
CD.run(databn, nlevels)
testthat::expect_error(CD.run(databn, nlevels), NA)
testthat::expect_error(CD.run(databn, nlevels))
CD.run(databn, nlevels)
install.packages("testthat")
install.packages("testthat")
CD.run(databn, nlevels)
library(discretecdAlgorithm)
# set up input variable
data <- matrix(c(1, 1, 0, 0, 1, 1,
1, 1, 0, 1, 1, 1,
0, 0, 1, 0, 0, 1,
0, 0, 1, 0, 0, 1,
0, 0, 0, 1, 1, 0,
0, 0, 0, 1, 1, 1,
1, 1, 1, 1, 0, 0,
1, 0, 1, 1, 0, 1,
0, 0, 0, 0, 1, 0,
1, 1, 1, 1, 0, 1,
1, 1, 0, 1, 1, 1,
0, 0, 1, 0, 0, 1,
1, 1, 0, 1, 0, 0,
1, 0, 1, 1, 0, 1,
1, 1, 1, 1, 1, 0,
1, 0, 1, 1, 1, 1,
0, 0, 1, 0, 0, 0,
1, 1, 0, 1, 1, 1,
1, 1, 1, 0, 0, 0,
1, 1, 1, 1, 0, 0,
0, 0, 0, 0, 1, 0,
0, 0, 1, 0, 0, 0,
1, 0, 0, 0, 1, 1,
0, 0, 1, 0, 0, 0,
1, 0, 1, 1, 0, 1,
0, 0, 0, 1, 1, 0,
0, 0, 0, 0, 0, 0,
0, 0, 1, 0, 1, 0,
0, 0, 1, 0, 0, 0,
0, 0, 1, 0, 0, 0), byrow = TRUE, ncol = 6)
dataSize <- dim(data)[1]
node <- dim(data)[2]
nlevels <- rep(2, node)
ivn <- vector("list", length = dataSize)
ivn <- lapply(ivn, function(x){return(as.integer(0))})
databn <- sparsebnUtils::sparsebnData(data, ivn, type = "discrete")
CD.run(databn, nlevels)
# set up input variable
data_matrix <- matrix(c(1, 1, 0, 0, 1, 1,
1, 1, 0, 1, 1, 1,
0, 0, 1, 0, 0, 1,
0, 0, 1, 0, 0, 1,
0, 0, 0, 1, 1, 0,
0, 0, 0, 1, 1, 1,
1, 1, 1, 1, 0, 0,
1, 0, 1, 1, 0, 1,
0, 0, 0, 0, 1, 0,
1, 1, 1, 1, 0, 1,
1, 1, 0, 1, 1, 1,
0, 0, 1, 0, 0, 1,
1, 1, 0, 1, 0, 0,
1, 0, 1, 1, 0, 1,
1, 1, 1, 1, 1, 0,
1, 0, 1, 1, 1, 1,
0, 0, 1, 0, 0, 0,
1, 1, 0, 1, 1, 1,
1, 1, 1, 0, 0, 0,
1, 1, 1, 1, 0, 0,
0, 0, 0, 0, 1, 0,
0, 0, 1, 0, 0, 0,
1, 0, 0, 0, 1, 1,
0, 0, 1, 0, 0, 0,
1, 0, 1, 1, 0, 1,
0, 0, 0, 1, 1, 0,
0, 0, 0, 0, 0, 0,
0, 0, 1, 0, 1, 0,
0, 0, 1, 0, 0, 0,
0, 0, 1, 0, 0, 0), byrow = TRUE, ncol = 6)
data_matrix <- matrix(as.integer(data_matrix), ncol = 6)
node = 6; node <- as.integer(node)
dataSize = 30; dataSize <- as.integer(dataSize)
n_levels <- rep(2, 6)
n_levels <- as.integer(n_levels)
obs <- 1:30
obsIndex_R <- vector("list", length = 6)
obsIndex_R <- lapply(obsIndex_R, function(x, obs){as.integer(obs)}, obs)
eor_nr <- node*(node-1)/2
eor <- matrix(0, nrow=eor_nr, ncol=2)
cnt1=1
for (i in 1:(node-1)) {
for (j in (i+1):node) {
eor[cnt1, 1] = i;
eor[cnt1, 2] = j;
cnt1 = cnt1+1;
}
}
eor_nr <- as.integer(eor_nr)
eor <- matrix(as.integer(eor), ncol = 2)
fmlam = 0.1; fmlam <- as.numeric(fmlam)
nlam = 10; nlam = as.integer(nlam)
eps = 0.0001; eps <- as.numeric(eps)
convLb = 0.01; convLb <- as.numeric(convLb)
qtol= 0.0001; qtol = as.numeric(qtol)
weights = matrix(rep(1L, 6*6), ncol = 6)
gamma = 1; gamma <- as.numeric(gamma)
upperbound = 100; upperbound <- as.numeric(upperbound)
CD_path(node, dataSize, data_matrix, n_levels, obsIndex_R, eor_nr, eor, fmlam, nlam, eps, convLb, qtol, weights, gamma, upperbound)
discretecdAlgorithm:::CD_path(node, dataSize, data_matrix, n_levels, obsIndex_R, eor_nr, eor, fmlam, nlam, eps, convLb, qtol, weights, gamma, upperbound)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
node = 3
weights <- matrix(1, node, node)
weights <- as.matrix(as.numeric(weights), ncol = node)
weights
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
t <- c(-1, 2, 3, -2)
t<0
sum(t<0)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
x <- rep
x <- rep()
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
is.numeric(1L)
is.integer(1L)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
m <- matrix(0, nrow=3, ncol=3)
class(m)
class(m[1, 2])
m <- matrix(0L, nrow=3, ncol=3)
class(m[1, 2])
is.numeric(m)
is.integer(m)
devtools::check()
/private/var/folders/kl/g28zzqm52511hp03xyhhcfs00000gn/T/RtmppAzHei/discretecdAlgorithm.Rcheck/00check.log
‘/private/var/folders/kl/g28zzqm52511hp03xyhhcfs00000gn/T/RtmppAzHei/discretecdAlgorithm.Rcheck/00check.log’
m
m <- matrix(1:9, nrow=3)
m
class(m[1, 1])
as.character(m)
m_ch <- matrix(as.character(m), nrow=3)
m_ch
m
m <- matrix(1, nrow=3, ncol=3)
m[1, 1]=-1
m
if(m>0)
{}
m>0
sum(m>0)
sum(m<0)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
data <- matrix(c(1, 1, 0, 0, 1, 1,
1, 1, 0, 1, 1, 1,
0, 0, 1, 0, 0, 1,
0, 0, 1, 0, 0, 1,
0, 0, 0, 1, 1, 0,
0, 0, 0, 1, 1, 1,
1, 1, 1, 1, 0, 0,
1, 0, 1, 1, 0, 1,
0, 0, 0, 0, 1, 0,
1, 1, 1, 1, 0, 1,
1, 1, 0, 1, 1, 1,
0, 0, 1, 0, 0, 1,
1, 1, 0, 1, 0, 0,
1, 0, 1, 1, 0, 1,
1, 1, 1, 1, 1, 0,
1, 0, 1, 1, 1, 1,
0, 0, 1, 0, 0, 0,
1, 1, 0, 1, 1, 1,
1, 1, 1, 0, 0, 0,
1, 1, 1, 1, 0, 0,
0, 0, 0, 0, 1, 0,
0, 0, 1, 0, 0, 0,
1, 0, 0, 0, 1, 1,
0, 0, 1, 0, 0, 0,
1, 0, 1, 1, 0, 1,
0, 0, 0, 1, 1, 0,
0, 0, 0, 0, 0, 0,
0, 0, 1, 0, 1, 0,
0, 0, 1, 0, 0, 0,
0, 0, 1, 0, 0, 0), byrow = TRUE, ncol = 6)
dataSize <- dim(data)[1]
node <- dim(data)[2]
nlevels <- rep(2, node)
ivn <- vector("list", length = dataSize)
ivn <- lapply(ivn, function(x){return(as.integer(0))})
databn <- sparsebnUtils::sparsebnData(data, ivn, type = "discrete")
final <- CD.run(databn, nlevels)
class(final)
expect_is(final, "sparsebnPath")
?seq_along
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
devtools::document()
library(discretecdAlgorithm)
devtools::document()
library(discretecdAlgorithm)
library(discretecdAlgorithm)
devtools::check()
devtools::document()
library(discretecdAlgorithm)
devtools::check()
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
library(discretecdAlgorithm)
devtools::check()
library(discretecdAlgorithm)
library(discretecdAlgorithm)
devtools::check()
library(discretecdAlgorithm)
devtools::check()
?print.ftable
