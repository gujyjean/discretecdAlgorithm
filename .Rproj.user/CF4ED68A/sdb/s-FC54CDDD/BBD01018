{
    "collab_server" : "",
    "contents" : "# You can learn more about package authoring with RStudio at: http://r-pkgs.had.co.nz/\n# Some useful keyboard shortcuts for package authoring: Build and Reload Package: 'Cmd +\n# Shift + B' Check Package: 'Cmd + Shift + E' Test Package: 'Cmd + Shift + T'\n\n# ========================================================\n# Note that this is only a trial version.\n# There will be no such choice that we can input the initial beta.\n# No documentation yet\n# ========================================================\n\n#' @useDynLib discretecdAlgorithm\n#' @importFrom Rcpp sourceCpp\nNULL\n\n# ========================================================\n# The main function CD.run\n# ========================================================\n## will be exported\n\n#' Learn structure of a discrete network\n#'\n#' @param data A data matrix\n#' @param nlevels A vector indicating number of levels for each variable\n#' @param obsIndex_R Observation index, a vector, has length equal to the data size. Each element indicates which variable is under intervention, if none, use 0.\n#' @param eor_nr A number indicate the length of the active set\n#' @param eor Active set\n#' @param weights weight matrix\n#' @return A matrix, consist of all the graphs along the solution path.\n#' @export\nCD.run <- function(indata, nlevels, eor_nr, eor, weights, fmlam=0.1, nlam=30,\n                   eps=0.0001, convLb=0.01, qtol = 0.0001, gamma=1.0, upperbound = 100.0) {\n  dataSize <- nrow(indata)\n  node <- ncol(indata)\n\n  if(is.data.frame(indata)){\n    warning(sparsebnUtils::alg_input_data_frame())\n    ivn <- vector(\"list\", length = dataSize)\n    ivn <- lapply(ivn, function(x){\n      return(c(0L))\n    })\n    data <- sparsebnUtils::sparsebnData(indata, ivn, type = \"discrete\")\n  }\n  if(!sparsebnUtils::is.sparsebnData(data)) stop(sparsebnUtils::input_not_sparsebnData(data))\n  data_matrix <- data$data\n  data_ivn <- data$ivn\n  # data_ivn <- lapply(data_ivn, function(x) {\n  #   return(as.integer(x))\n  # })\n  length_ivn <- sapply(data_ivn, function(x) {\n    return(length(x))\n  })\n\n  obsIndex_R <- get_obsIndex(data_ivn, node)\n  ind <- 1:node\n  is_obs_zero <- sapply(obsIndex_R, function(x){length(x)==0})\n  if(length(ind[is_obs_zero])!=0) {\n    stop(sprintf(\"%d th node has been intervened in all observations, remove this node \\n\", ind[is_obs_zero]))\n  }\n\n  obsIndex_R <- lapply(obsIndex_R, function(x) {x-1})\n\n  estimate <- CD(as.integer(node), as.integer(dataSize),\n                 as.matrix(data_matrix),\n                  as.integer(nlevels), obsIndex_R,\n                   as.integer(eor_nr), as.matrix(eor), as.numeric(fmlam),\n                   as.integer(nlam), as.numeric(eps), as.numeric(convLb),\n                   as.numeric(qtol), as.matrix(weights),\n                   as.numeric(gamma), as.numeric(upperbound))\n  # just for testing\n  lambda <- estimate$lambdas\n  estimateG <- estimate$estimateG\n  time = rep(NA, nlam)\n\n  fit <- get.edgeList(estimateG, dataSize, lambda, time)\n  fit <- lapply(fit, sparsebnUtils::sparsebnFit)\n  sparsebnUtils::sparsebnPath(fit)\n\n  return(fit)\n}\n\n\n",
    "created" : 1460431516878.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3563081081",
    "id" : "BBD01018",
    "lastKnownWriteTime" : 1460591932,
    "path" : "~/Documents/STAT-COURSE/qualify/discretecdAlgorithm/discretecdAlgorithm/R/CD-main.R",
    "project_path" : "R/CD-main.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}