{
    "collab_server" : "",
    "contents" : "# to get sparsebnFit object from the adjacency matrix\nget.summary <- function(graph, dataSize, lambda, time) {\n  lambda = lambda\n  nedge <- sum(graph)\n  pp <- ncol(graph)\n  nn <- dataSize\n  edges <- apply(graph, 2, function(x){\n    return(which(x==1))\n  })\n  if (length(edges) == 0) {\n    edges <- vector(\"list\", length = pp)\n  }\n  edges <- sparsebnUtils::edgeList(edges)\n  return(list(edges = edges, lambda = lambda, nedge = nedge, pp = pp, nn = nn, time = time))\n}\n\n# to change a output solution path of matrix to a list\nget.edgeList <- function(edgeMatrix, dataSize, lambda, time) {\n  n_node <- ncol(edgeMatrix)\n  n_graph <- nrow(edgeMatrix)/n_node\n  edgeList <- vector(\"list\", n_graph)\n  for (i in 1:n_graph) {\n    graph <- edgeMatrix[((i-1)*n_node+1):(i*n_node), ]\n    edgeList[[i]] <- get.summary(graph, dataSize, lambda[i], time[i])\n  }\n  return(edgeList)\n}\n\n# to get obsIndex from a given intervention list (ivn)\nget_obsIndex <- function(ivn, node) {\n  obsIndex <- vector(\"list\", length = node)\n  ind <- 1:node\n  obsIndex <- lapply(ind, function(x, ivn) {\n    if_in <- sapply(ivn, function(y) {x %in% y})\n    observation <- 1:length(ivn)\n    obsIndex_one <-observation[!if_in]\n    if (length(obsIndex_one)==0) {obsIndex_one == 0L}\n    obsIndex_one\n  }, ivn)\n  return(obsIndex)\n}\n",
    "created" : 1460579369488.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4231083293",
    "id" : "BCD5A23B",
    "lastKnownWriteTime" : 1460583131,
    "path" : "~/Documents/STAT-COURSE/qualify/discretecdAlgorithm/discretecdAlgorithm/R/basic.R",
    "project_path" : "R/basic.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}